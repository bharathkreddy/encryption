import random

# we are trying to implement : https://en.wikipedia.org/wiki/Linear_congruential_generator
# Idea is to be able to generate a random keystring but which can be regenerated by the receiver as well with some seed. 
class KeyStream:
    def __init__(self, key=1):
        self.next = key

    def rand(self):
        self.next = (1103515245* self.next + 12345 ) % 2**31
        return self.next

    def get_key_byte(self):
        return self.rand() % 256   # we dont take the entire value but first 256 values to convert it to integer.


def encrypt(key, message):
    return bytes([message[i] ^ key.get_key_byte() for i in range(len(message))])

# Lets simulate what happens when some random bits gets fipped in cipher during transmission.
def transmit(cipher, likely): 
    b = []
    for c in cipher:
        if random.randrange(0, likely) == 0:
            c = c ^ 2**random.randrange(0, 8)
        b.append(c)
    return bytes(b)

def modification(cipher): 
    mod = [0] * len(cipher)  #creates a zero array of same legth as cipher, now we can modify this array at some places to change the cipher
    mod[11] = ord(' ') ^ ord('1')  #13th character is space - replace that with 1
    mod[12] = ord(' ') ^ ord('0')  #13th character is space - replace that with 1
    mod[13] = ord('1') ^ ord('0')  #14th character is 1 - replace that with 0 
    return bytes([mod[i] ^ cipher[i] for i in range(len(cipher))]) # XOR with cipher and we have modified the cipher. see what the bank sees now.

# This is Alice who sends bob an ecrypted message
key = KeyStream(10)
message = "Hello, World! I am attacking tommorow and conquer the universe".encode()
cipher = encrypt(key, message)
print(cipher)

# This is Bob who has to decrypt the key
key = KeyStream(10) 
message = encrypt(key, cipher)
print(message)

# If bob were to receive this dammaged transmission, this is what he would hear, its still sort of clear. 
cipher = transmit(cipher, 5)
key = KeyStream(10)
message = encrypt(key, cipher)
print(message)
print('~'*100)

#####################################
## PROBLEM WITH AUTHENTICATION ######
#####################################
# this is alice again trying to send $10 to bob and this message is to bank
key = KeyStream(10)
message = "Send bob:    10$".encode()
print(message)
cipher = encrypt(key, message)
print(cipher)

#this is BOB trying to change 10£ to 100£
cipher = modification(cipher)

# this is bank, hash out previous line of code to see what bank hears without incerception, and unhash to see what bank hears with bob intercepting message.
key = KeyStream(10)
message = encrypt(key, cipher)
print(message)
print('~'*100)

#####################################
#####  PROBLEM WITH KEY REUSE  ######
#####################################

# EVE tricks Alice to send a message to bob
eves_message = "This is eves most valued secret, dont tell Bob".encode()

# ALICE (Eve tricker Alice to send this message to Bob)
key = KeyStream(10)
print('message encrypted: ',eves_message)
cipher = encrypt(key, eves_message)
print('cipher text: ',cipher)

# EVE intercepts this message, now eve knows message and ciper text as well.

def get_key(message, cipher):
    return bytes([message[i] ^ cipher[i] for i in range(len(cipher))])

eve_key_stream = get_key(eves_message, cipher)
print("eve's calculated key: ",eve_key_stream)

# BOB receives message from ALICE
key = KeyStream(10)
print('Bob reads: ',encrypt(key, cipher))

# ALICE sends a new message to BOB
key = KeyStream(10)
message = "Party at my place tommorow, dont tell Eve".encode()
cipher = encrypt(key, message)
print("Alice's msg: ",message)
print("Alice's encrypted msg: ",cipher)


# BOB receives ALICE's message and reads
key = KeyStream(10)
print("Bob reads: ",encrypt(key,cipher))

# EVE intercepts Alices secret correspondence and reads

def crack(key_stream, cipher):
    length = min(len(key_stream), len(cipher))  #keystream eve calculated was based on last message, and that might not match lenght of this new cipher
    return bytes([key_stream[i] ^ cipher[i] for i in range(length)])

print("EVE reads: ",crack(eve_key_stream, cipher))  
print("~"*100)

#####################################
#####    LOW ENTROPY PROBLEM   ######
#####################################

# ALICE 
Alice_bobs_secret_key = 10
key = KeyStream(Alice_bobs_secret_key)
header = "MESSAGE: "
message = header + "My secret message to BOB"
message = message.encode()
print("Alice plaintext : ",message)
cipher = encrypt(key, message)
print("Alice sends: ",cipher)

# BOB
key = KeyStream(Alice_bobs_secret_key)
print('Bob reads',encrypt(key, cipher))

# EVE intercepts the encrypted message / cipher
def brute_force(plain, cipher):
    for k in range(2**31):
        bf_key = KeyStream(k)
        for i in range(len(plain)):
            if plain[i] ^ cipher[i] != bf_key.get_key_byte():
                break
        else:
            return k
    return False


bf_key = brute_force(header.encode(), cipher)
print('Eves Brute force key: ', bf_key)
key = KeyStream(bf_key)
message = encrypt(key, cipher)
print("eve reads: ",message)
